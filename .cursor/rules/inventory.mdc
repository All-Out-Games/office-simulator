---
description: For player inventory systems
globs: 
---
# Items & Inventory

- Note that by default items in the inventory array are **null** be careful! 
- Make sure to perform inventory operations on the client AND server

## Drawing the Inventory
You must draw the inventory in the Player's update function. Use the default inventory unless told otherwise. 

public override void Update()
{
  var hotbarResult = Inventory.DrawHotbar(DefaultInventory.Id, new Inventory.DrawOptions()
  {
    HotbarItemCount = 5,
    AllowDragDrop = true,

    EnableUseFromHotbar = true,
    ScrollItemSelection = true,
    KeyboardItemSelection = true,
  });

  <!-- Optionally check if a player drag-n-dropped an item out of the inventory -->
  if (hotbarResult.DroppedItem != null)
  {
      CallServer_PleaseDropItem(hotbarResult.DroppedItem.InventorySlot);
  }

  [ServerRpc]
  public void PleaseDropItem(long itemIndex)
  {
      var items = DefaultInventory.Items;
      if (itemIndex < 0 || itemIndex >= items.Length) return;
      var player = (MyPlayer)Network.GetRemoteCallContextPlayer();
      if (!player.Alive()) return;
      var item = items[itemIndex];
      if (item == null) return;
      if (item.Inventory != player.DefaultInventory) return;

      Inventory.RemoveItemFromInventory(item, player.DefaultInventory);
      ServerDropItems(new List<Item_Instance>(){item});
  }
}

## Creating Items
public Item_Definition Item;
public override void Start()
{
  Item = Item_Definition.Create(new ItemDescription()
  {
    Id = "fish",
    Icon = "my_asset.png",
    Name = "Fish",
    StackSize = -1, // Infinite
  });
}

## Granting an Item
Be very careful not to grant past the max stack size or it will crash. 
public void GrantItem()
{
    var item = Inventory.CreateItem(item_name, quantity);
    Inventory.MoveItemToInventory(item, Player.DefaultInventory);
}

## Other functions
Inventory.DestroyItem(item);
