---
description: For any UI, you must reference this UI documentation
globs: 
---
# UI Requirements
- This is a custom engine, do not attempt to use any Unity functions
- Any UI you make must include subtle animations
- Make something you would truly be proud of, do not do the bare minimum. Millions of people will see this. 
- This game will be recorded for YouTube, so make anything you do larger than life and pop for viewers
- Use constants to help make adjustments easier
- Make each discrete piece of UI in a folder scripts/ui/descriptive-name.cs, make sure to add using AO; at the top. Do not import anything else. 
- In our UI system Y grows upward. (0, 0) is the bottom left of the screen.
- If you have UI that needs to set a SyncVar or other networked state, you must use a [ServerRpc] annotated function called from the client to do so. 
- If you have multiple buttons make sure to push IDs!

## The [UIPreview] Decorator
Your boss wants to see your work periodically to make sure you're following directions. 

To do this you must be careful to structure UI code you write as a function that takes any input it needs as parameters and decorate it with [UIPreview].

For example:
[UIPreview]
public static void DrawPlayerGrid(List<MyPlayer> players, float time, float duration, bool doRewardsAndElims)
{
    if (Network.IsServer)
    {
        return;
    }

    var gridPositions = new Vector2[]
    {
        new Vector2(-0.5f, 0), new Vector2(0.5f, 0), new Vector2(0f, -0.5f), new Vector2(-1f, -0.5f), new Vector2(1f, -0.5f), new Vector2(-1.5f, 0),  new Vector2(1.5f, 0),
    };
    var playerDiamondNumber = Assets.GetAsset<Texture>("ui/player_list/player_diamond_number.png");
    var numberBack          = Assets.GetAsset<Texture>("ui/player_list/number_back.png");
    var playerDiamondBack   = Assets.GetAsset<Texture>("ui/player_list/player_diamond_back.png");

    var countPerRow = 7;
    var rowCount = (int)MathF.Ceiling((float)players.Count / 7f);
    var entrySize = 175;
    var entryRect = UI.ScreenRect.CenterRect().Grow(entrySize / 2f);
    var numberTs = GetTextSettings(35);
    var timeOffsetPerPlayer = 0.5f / (float)players.Count;
    for (int i = 0; i < players.Count; i++)
    {
        var player = players[i];
        var indexInRow = i % countPerRow;
        var rowIndex = i / countPerRow;
        var myEntryRect = entryRect.Slide(gridPositions[indexInRow].X, gridPositions[indexInRow].Y);
        myEntryRect = myEntryRect.Slide(0, -0.25f + rowCount * 0.5f - rowIndex);

        var localTime = time - (players.Count - i - 1) * timeOffsetPerPlayer;
        var localDuration = duration - (players.Count - i - 1) * (timeOffsetPerPlayer * 2);
        var show01 = 1f - Ease.OutQuart(FadeInAndOut(0.4f, 0.4f, localDuration, localTime-0.5f));
        myEntryRect = myEntryRect.Offset(0, 1080f * show01);

        var diamondRect = myEntryRect.FitAspect(playerDiamondBack.Aspect);
        UI.Image(diamondRect, playerDiamondBack);

        if (player.Alive())
        {
            var maskScope = IM.CreateMaskScope(diamondRect);
            {
                using var _123 = IM.BUILD_MASK_SCOPE(maskScope);
                UI.Image(diamondRect, playerDiamondBack);
            }

            {
                using var _323 = IM.USE_MASK_SCOPE(maskScope);
                using var _ = UI.PUSH_UNLIT_PLAYER_MATERIAL(player);

                var scale = new Vector2(entrySize * 0.7f, entrySize * 0.7f);
                UI.DrawSkeleton(myEntryRect.Offset(0, -65), player.GetSpineInstanceForPlayerList(), scale, 0);
            }
        }

        UI.Image(myEntryRect.Grow(2).FitAspect(playerDiamondNumber.Aspect).Grow(2), playerDiamondNumber);
        UI.Text(myEntryRect.Offset(0, -40), player.PlayerNumberForThisTournament.Value.ToString("D3"), numberTs);

        if (doRewardsAndElims)
        {
            using var _ = UI.PUSH_LAYER_RELATIVE(10);
            if (player.IsEliminated || player.Alive() == false)
            {
                var elim01 = Ease.OutBack(Ease.T(localTime - 1f, 0.35f));
                if (player.WasEliminatedThisRound == false || player.Alive() == false)
                {
                    elim01 = 1.0f;
                }
                var ts = GetTextSettings(elim01 * 150);
                ts.Color = new Vector4(1, 0, 0, 1);
                UI.Text(myEntryRect, "X", ts);
            }
            else
            {
                var goldReward01 = Ease.OutBack(FadeInAndOut(0.15f, 0.15f, 1.0f, localTime - 1f));
                var xpReward01   = Ease.OutBack(FadeInAndOut(0.15f, 0.15f, 1.0f, localTime - 2f));

                var rewardTs = GetTextSettings(50);
                var textRect = myEntryRect.Offset(0, 25);

                using var _32123 = UI.PUSH_ROTATE_ABOUT_POINT(MathF.Sin(2 * MathF.PI * Time.TimeSinceStartup) * 10f, textRect.Center);

                rewardTs.Color = new Vector4(1.0f, 0.84f, 0, 1f);
                rewardTs.Size = 50f * goldReward01;
                UI.Text(textRect, $"+{GameManager.Instance.GoldRewardForThisRound}GP", rewardTs);

                rewardTs.Color = new Vector4(0.5f, 0, 0.5f, 1f);
                rewardTs.Size = 50f * xpReward01;
                UI.Text(textRect, $"+{GameManager.Instance.XPRewardForThisRound}XP", rewardTs);
            }
        }
    }
}

## Available Rect Functions
You must not use any other Rect functions besides the ones in this list:
public struct Rect
{
  public Rect SubRect(float xMin, float yMin, float xMax, float yMax)
  public Rect SubRect(float xMin, float yMin, float xMax, float yMax, float top, float right, float bottom, float left)
  public Rect Inset(float top, float right, float bottom, float left)
  public Rect Inset(float all)
  public Rect Grow(float top, float right, float bottom, float left)
  public Rect Grow(float all)
  public Rect Offset(float x, float y)
  public Rect CutTop(float pixels)
  public Rect CutRight(float pixels)
  public Rect CutBottom(float pixels)
  public Rect CutLeft(float pixels)
  public Rect InsetTop(float pixels)
  public Rect InsetRight(float pixels)
  public Rect InsetBottom(float pixels)
  public Rect InsetLeft(float pixels)
  public Rect GrowTop(float pixels)
  public Rect GrowRight(float pixels)
  public Rect GrowBottom(float pixels)
  public Rect GrowLeft(float pixels)
  public Rect SubRectUnscaled(float xMin, float yMin, float xMax, float yMax, float top, float right, float bottom, float left)
  public Rect InsetUnscaled(float top, float right, float bottom, float left)
  public Rect GrowUnscaled(float top, float right, float bottom, float left)
  public Rect OffsetUnscaled(float x, float y)
  public Rect CutTopUnscaled(float pixels)
  public Rect CutRightUnscaled(float pixels)
  public Rect CutBottomUnscaled(float pixels)
  public Rect CutLeftUnscaled(float pixels)
  public Rect InsetTopUnscaled(float pixels)
  public Rect InsetRightUnscaled(float pixels)
  public Rect InsetBottomUnscaled(float pixels)
  public Rect InsetLeftUnscaled(float pixels)
  public Rect GrowTopUnscaled(float pixels)
  public Rect GrowRightUnscaled(float pixels)
  public Rect GrowBottomUnscaled(float pixels)
  public Rect GrowLeftUnscaled(float pixels)
  public Rect Scale(float all)
  public Rect Scale(float x, float y)
  public Rect Slide(float x, float y)
  public Rect FitAspect(float aspect, FitAspectKind kind = FitAspectKind.Auto)
}

## IM class
For drawing raw quads you can use the IM class
public static class IM
{
    public struct QuadData
    {
        public QuadData() {}
        public QuadData(Vector2 min, Vector2 max, Vector4 color, Texture sprite)
        public QuadData(Vector2 min, Vector2 max, float rotationRadians, Vector4 color, Texture sprite)
        public QuadData(Vector2 min, Vector2 max, Vector2 uvMin, Vector2 uvMax, Vector4 color, Texture sprite)
        public QuadData(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector4 c, Texture sprite)
        public QuadData(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, Vector2 uv1, Vector2 uv2, Vector2 uv3, Vector2 uv4, Vector4 c, Texture sprite)
    }
}

## Available Assets
To get an asset use `Assets.GetAsset<Texture>(asset_path)`
The only available asset paths are:
"$AO/new/modal/buttons_2/button_8.png" // grey button
"$AO/new/modal/buttons_2/button_2.png" // green button
"$AO/white.png" // White square
"$AO/circle.png" // White circle
"$AO/new/Ability Buttons/small_ability_button.png" 
"$AO/new/Ability Buttons/small_ability_button_pressed.png" 
"$AO/new/Leaderboard/bronze_medal.png" // Silver and gold also work
"$AO/new/Health Bar/health_bar_green/healthbar_back.png"
"$AO/new/Health Bar/health_bar_green/healthbar_fill.png"

## Good default text settings to use:
var ts = new UI.TextSettings()
{
  Font = uint.Fonts.BarlowBold,
  Size = size,
  Color = color ?? Vector4.White,
  DropShadowColor = new Vector4(0f, 0f, 0.02f, 0.5f),
  DropShadowOffset = new Vector2(0f, -3f),
  HorizontalAlignment = halign,
  VerticalAlignment = UI.VerticalAlignment.Center,
  WordWrap = false,
  WordWrapOffset = 0,
  Outline = true,
  OutlineThickness = 3,
  Offset = new Vector2(0, offset),
};

# Usage Examples:
public partial class MyPlayer : Player
{
    public static UI.TextSettings ListTextSettings = new UI.TextSettings()
    {
        Size = 20,
        Color = new Vector4(0, 0, 0, 1),
        Font = UI.Fonts.Barlow,
        VerticalAlignment = UI.VerticalAlignment.Center,
        HorizontalAlignment = UI.HorizontalAlignment.Center,
    };

    public static UI.ButtonSettings ListButtonSettings = new UI.ButtonSettings()
    {
        Sprite = UI.WhiteSprite,
        BackgroundColorMultiplier = new Vector4(0.5f, 0.5f, 0.5f, 1),
        PressScaling = 0.25f,
    };

    public static int CurrentSelection;

    public static void DrawUIDemo()
    {
        var listRect = UI.SafeRect.SubRect(0, 0.5f, 0, 0.5f).Grow(250, 300, 250, 0).Offset(10, -35);
        UI.Image(listRect, null, new Vector4(0, 0, 0, 0.75f));

        Action demoFunction = null;
        var sv = UI.PushScrollView("list", listRect, new UI.ScrollViewSettings(){Vertical = true});
        {
            bool Entry(ref Rect listRect, int selection, string text)
            {
                var rect = listRect.CutTop(45);
                var bs = ListButtonSettings;
                if (CurrentSelection == selection)
                {
                    bs.BackgroundColorMultiplier = new Vector4(0.25f, 1, 0.25f, 1);
                }
                if (UI.Button(rect.Inset(5), text, bs, ListTextSettings).Clicked)
                {
                    CurrentSelection = selection;
                }
                return CurrentSelection == selection;
            }

            if (Entry(ref sv.contentRect, 0,  "None"))                    {}
            if (Entry(ref sv.contentRect, 1,  "Serial Numbers 1"))        { demoFunction = DemoSerialNumbers1; }
            if (Entry(ref sv.contentRect, 2,  "Serial Numbers 2"))        { demoFunction = DemoSerialNumbers2; }
            if (Entry(ref sv.contentRect, 3,  "Layers"))                  { demoFunction = DemoLayers;         }
            if (Entry(ref sv.contentRect, 4,  "Z"))                       { demoFunction = DemoZ;              }
            if (Entry(ref sv.contentRect, 5,  "IDs"))                     { demoFunction = DemoIDs;            }
            if (Entry(ref sv.contentRect, 6,  "Autoscaling"))             { demoFunction = DemoAutoscaling;    }
            if (Entry(ref sv.contentRect, 7,  "Rect Cuts"))               { demoFunction = DemoRectCuts;       }
            if (Entry(ref sv.contentRect, 8,  "Grids"))                   { demoFunction = DemoGrids;          }
        }
        UI.PopScrollView();

        if (demoFunction != null)
        {
            demoFunction();
        }
    }

    [UIPreview]
    public static void PreviewUI(Rect rect)
    {
        DrawUIDemo();
    }

    public override void Update()
    {
        if (IsLocal)
        {
            DrawUIDemo();
        }
    }

    public static void DemoSerialNumbers1()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(150, 200, 150, 200);
        UI.Image(bgRect, null, new Vector4(1, 1, 1, 1));

        var leftRect = UI.ScreenRect.CenterRect().Grow(25).Offset(-100, 0);
        UI.Image(leftRect, null, new Vector4(1, 0, 0, 1));
        UI.Image(leftRect.Offset(25, -25), null, new Vector4(0, 1, 0, 1));

        var rightRect = UI.ScreenRect.CenterRect().Grow(25).Offset(100, 0);
        var serial = IM.GetNextSerial();
        UI.Image(rightRect, null, new Vector4(1, 0, 0, 1));
        IM.SetNextSerial(serial);
        UI.Image(rightRect.Offset(25, -25), null, new Vector4(0, 1, 0, 1));
    }

    public static void DemoSerialNumbers2()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(100, 150, 100, 150);
        UI.Image(bgRect, null, new Vector4(1, 1, 1, 1));

        var bgSerial = IM.GetNextSerial();
        var ts = ListTextSettings;
        ts.WordWrap = true;
        var str = "This is a long message with an auto-sizing background.";
        var actualTextRect = UI.Text(bgRect, str.Substring(0, ((int)(Time.TimeSinceStartup * 10)) % (str.Length+1)), ts);
        IM.SetNextSerial(bgSerial);
        UI.Image(actualTextRect, null, new Vector4(0, 1, 0, 1));
    }

    public static void DemoLayers()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(150, 200, 150, 200);
        UI.Image(bgRect, null, new Vector4(1, 1, 1, 1));

        void DrawWindow(Rect rect, ref ulong rng)
        {
            for (int i = 0; i < 3; i++)
            {
                UI.Image(rect, null, new Vector4(RNG.RangeFloat(ref rng, 0.5f, 1.0f), RNG.RangeFloat(ref rng, 0.5f, 1.0f), RNG.RangeFloat(ref rng, 0.5f, 1.0f), 1));
                rect = rect.Inset(30);
            }
        }


        ulong rng = RNG.Seed(1337);
        var layer1 = (((int)Time.TimeSinceStartup) % 2 == 0) ? 100 : 200;
        var layer2 = 150;
        {
            using var _ = UI.PUSH_LAYER(layer1);
            DrawWindow(UI.ScreenRect.CenterRect().Grow(100).Offset(-75, 25), ref rng);
        }
        {
            using var _ = UI.PUSH_LAYER(layer2);
            DrawWindow(UI.ScreenRect.CenterRect().Grow(100).Offset( 75, -25), ref rng);
        }

        // todo(josh): demo layering problems with interleaving
    }

    public static void DemoZ()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(150, 200, 150, 200);
        UI.Image(bgRect, null, new Vector4(1, 1, 1, 1));

        {
            using var _ = UI.PUSH_LAYER(100); // just so that we are guaranteed to draw above the bgRect above.

            var rect1 = UI.ScreenRect.CenterRect().Grow(25).Offset(-15, 0);
            var rect2 = UI.ScreenRect.CenterRect().Grow(25).Offset(15, 0);
            UI.Image(rect1, null, new Vector4(1, 0, 0, 1));

            {
                var y = MathF.Sin(Time.TimeSinceStartup * 1.5f) * 50;
                using var _1 = IM.PUSH_Z(y);
                UI.Image(rect2.Offset(0, y), null, new Vector4(0, 1, 0, 1));
            }
        }
    }

    public static void DemoIDs()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(150, 200, 150, 200);
        UI.Image(bgRect, null, new Vector4(1, 1, 1, 1));

        var rect = UI.ScreenRect.CenterRect().Grow(25, 75, 25, 75).Offset(0, 50);
        for (int i = 0; i < 3; i++)
        {
            using var _ = UI.PUSH_ID(i); // try commenting this out and see what happens!
            if (UI.Button(rect.Inset(5), "Button", ListButtonSettings, ListTextSettings).Clicked)
            {
                Log.Info("Clicked " + i);
            }
            rect = rect.Offset(0, -50);
        }
    }

    public static void DemoAutoscaling()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(150, 200, 150, 200);
        UI.Image(bgRect, null, Vector4.White);

        // no scaling
        {
            using var _ = UI.PUSH_SCALE_FACTOR(1);
            UI.Image(bgRect.SubRect(0.5f, 1, 0.5f, 1).Grow(0, 200, 75, 200), null, new Vector4(1, 0, 0, 1));
        }

        // with scaling
        {
            UI.Image(bgRect.SubRect(0.5f, 0, 0.5f, 0).Grow(0, 200, 75, 200), null, new Vector4(0, 1, 0, 1));
        }
    }

    public static void DemoRectCuts()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(200, 200, 200, 200);
        UI.Image(bgRect, null, Vector4.White);

        var rect = bgRect.TopRect().Offset(0, -15); // TopRect() returns a 0 height rect spanning the top of bgRect

        // hardcoded cut
        {
            UI.Text(rect.CutTop(25), "Text 1", ListTextSettings);
            UI.Text(rect.CutTop(25), "Text 1", ListTextSettings);
            UI.Text(rect.CutTop(25), "Text 1", ListTextSettings);
        }

        rect.CutTop(50);

        // cut based on text height, but its wrong!
        {
            void DrawText(ref Rect rect)
            {
                var actualTextRect = UI.Text(rect, "Text 2", ListTextSettings);
                rect.CutTop(actualTextRect.Height); // wrong! use CutTopUnscaled!
            }

            DrawText(ref rect);
            DrawText(ref rect);
            DrawText(ref rect);
        }

        rect.CutTop(50);

        // cut based on EXACT VALUE of text height, not scaled
        {
            void DrawText(ref Rect rect)
            {
                var actualTextRect = UI.Text(rect, "Text 3", ListTextSettings);
                rect.CutTopUnscaled(actualTextRect.Height); // good :)
            }

            DrawText(ref rect);
            DrawText(ref rect);
            DrawText(ref rect);
        }
    }

    public static void DemoGrids()
    {
        var bgRect = UI.ScreenRect.CenterRect().Grow(200, 200, 200, 200);
        UI.Image(bgRect, null, Vector4.White);

        var grid = UI.GridLayout.Make(bgRect, 4, 4, UI.GridLayout.SizeSource.ElementCount, padding: 4);
        ulong rng = RNG.Seed(1337);
        for (int i = 0; i < 16; i++)
        {
            var rect = grid.Next();
            using var _ = UI.PUSH_ID(i);
            var bs = new UI.ButtonSettings();
            bs.Sprite = UI.WhiteSprite;
            bs.ColorMultiplier = new Vector4(RNG.RangeFloat(ref rng, 0.25f, 1.0f), RNG.RangeFloat(ref rng, 0.25f, 1.0f), RNG.RangeFloat(ref rng, 0.25f, 1.0f), 1);
            if (UI.Button(rect, "", bs, default).Clicked)
            {
                Log.Info("Clicked " + i);
            }
        }
    }
}