---
description: For Spine animations or other spine related things
globs: 
---
# Spine Reference
We use Esoteric Spine to need to aniamte characters and object. The Player component has a SpineAnimator property, for other objects get the Spine_Animator using Entity.GetComponent<Spine_Animator>()

## Animations
For simple animations you can call:
`spineAnimator.SpineInstance.SetAnimation("AnimationName", loop);`
Prefer this unless you know you NEED to use the state machine. 

To have a spine animator be aware of the player's mouse/aiming direction use Player.SetMouseIKEnabled.

## Crewshia
You can control the color of any spine rig, including player's character with the .SetCrewchsia(int) method of the Spine Animator.
The colors are defined as:
Red(Index 0)
Cyan(Index 1)
Green(Index 2)
Yellow(Index 3)
Light Green(Index 4)
Pink(Index 5)
Orange(Index 6)
Black(Index 7)
Purple(Index 8)
Light Gray(Index 9)
Black 2 (Index 10)
Green 3 (Index 11)
Orange 2 (Index 12)
Purple 2 (Index 13)
Red 2 (Index 14)
Blue 2 (Index 15)
Brown 1 (Index 16)
Purple 3 (Index 17)
White 1 (Index 18)

## Some other commonly used spine methods
```cs
SpineInstance.Scale = new Vector2(2.4f, 2.4f);
SpineInstance.SetSkeleton(Assets.GetAsset<SpineSkeletonAsset>("path"));
SpineInstance.SetStateMachine(BookshelfLever.MakeBookshelfStateMachine(), Entity);

var murderLayer = SpineAnimator.SpineInstance.StateMachine.CreateLayer("murder_layer", 10);
var aoLayer = SpineAnimator.SpineInstance.StateMachine.TryGetLayerByName("main");
var aoIdleState = aoLayer.TryGetStateByName("Idle");
var aoRunState = aoLayer.TryGetStateByName("Run_Fast");
var idleState = murderLayer.CreateState("MURD_002/empty", 0, true);
murderLayer.SetInitialState(idleState);

var pointBool = SpineAnimator.SpineInstance.StateMachine.CreateVariable("point", StateMachineVariableKind.BOOLEAN);
var pointExaggerateTrigger = SpineAnimator.SpineInstance.StateMachine.CreateVariable("point_exaggerate", StateMachineVariableKind.TRIGGER);
var pointState = murderLayer.CreateState("MURD_002/point_mIK_AL", 0, true);
var pointExaggerateState = murderLayer.CreateState("MURD_002/point_ex_mIK_AL", 0, false);
murderLayer.CreateTransition(idleState, pointState, false).CreateBoolCondition(pointBool, true);
murderLayer.CreateTransition(pointState, pointExaggerateState, false).CreateTriggerCondition(pointExaggerateTrigger);
murderLayer.CreateTransition(pointExaggerateState, pointExaggerateState, false).CreateTriggerCondition(pointExaggerateTrigger);
murderLayer.CreateTransition(pointExaggerateState, pointState, true);
murderLayer.CreateTransition(pointState, idleState, false).CreateBoolCondition(pointBool, false);

public class TransformFromKillerEffect : MyEffect
{
    public override bool IsActiveEffect => true;
    public override bool FreezePlayer => true;

    public override void OnEffectStart(bool isDropIn)
    {
        Player.KillerSpineAnimator.SpineInstance.StateMachine.SetTrigger("transform_back_start");
        if (isDropIn)
        {
            DurationRemaining = Player.KillerSpineAnimator.SpineInstance.StateMachine.TryGetLayerByName("killer_layer").GetCurrentStateLength();
        }
    }

    public override void OnEffectEnd(bool interrupt)
    {
        Player.AddEffect<FinishTransformFromKillerEffect>();
        if (interrupt)
        {
            Player.RemoveEffect<FinishTransformFromKillerEffect>(true);
        }
    }
}

    public override void OnEffectStart(bool isDropIn)
    {
        if (!isDropIn)
        {
            Player.AddFreezeReason("transforming");
            Player.KillerSpineAnimator.SpineInstance.StateMachine.SetTrigger("transform_end");
            Player.KillerSpineAnimator.OnAnimationEnd += OnKillerAnimationEnd;
        }
        else
        {
            Player.RemoveFreezeReason("transforming");
            DoneAnim = true;
        }

        Player.AddInvisibilityReason(nameof(KillerEffect));
        Player.KillerSpineAnimator.SpineInstance.Scale = new Vector2(4, 4);
        Player.KillerSpineAnimator.LocalEnabled = true;
        Player.KillerSpineAnimator.OnEvent += OnKillerAnimationEvent;
    }
```